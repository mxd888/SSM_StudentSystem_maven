<?xml version="1.0" encoding="UTF-8"?>
<!-- 若报错则在此处写 <!DOCTYPE xml> -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"> 
	<!-- 扫描出控制器以外的其他注解 -->
	
	<!-- 引入外部jdbc.properties -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />
	<!-- ===========================配置数据源==================================== -->
	<!-- 阿里 druid 数据库连接池 -->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
    <!-- 数据库基本信息配置 -->
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>

    <property name="filters" value="${jdbc.filters}"/>

    <!-- 最大并发连接数 -->
    <property name="maxActive" value="${jdbc.maxActive}"/>

    <!-- 初始化连接数量 -->
    <property name="initialSize" value="${jdbc.initialSize}"/>

    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${jdbc.maxWait}"/>

    <!-- 最小空闲连接数 -->
    <property name="minIdle" value="${jdbc.minIdle}"/>


    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

    <property name="validationQuery" value="${jdbc.validationQuery}"/>
    <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
    <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
    <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
    <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>

    <!-- 超过时间限制是否回收 -->
    <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>

    <!-- 1800 秒，也就是 30 分钟 -->
    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>

    <!-- 关闭 abanded 连接时输出错误日志 -->
    <property name="logAbandoned" value="${jdbc.logAbandoned}"/>
</bean>




	<!-- ===========================配置spring和mybatis整合========================= -->
<!-- 	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		指定mybatis全局配置文件的位置
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property> 
		<property name="dataSource" ref="dataSource"></property>
		指定mybatis，mapper 文件的位置
		<property name="mapperLocations"
			value="classpath:com/hdu/wll/mapper/*.xml"></property>
			<property name="typeAliasesPackage" value="com.hdu.wll.entity" />
	</bean> -->
	
	<bean class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <!--别名设置-->
        <property name="typeAliasesPackage" value="com.hdu.wll.entity,com.hdu.wll.pojo"/>
    	<!--引入mybatis核心配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 指定mybatis，mapper 文件的位置 -->
		<property name="mapperLocations"
			value="classpath:com/hdu/wll/mapper/*.xml"></property>
		<property name="plugins">
            <array>
                <!-- 分页插件配置 -->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor">
                </bean>
            </array>
        </property>
    </bean>

	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口加入到IOC容器中 -->
		<property name="basePackage" value="com.hdu.wll.dao"></property>
		 <!-- <property name="sqlSessionFactoryBeanName"
			value="SqlSessionFactory"></property> -->
	</bean>
	


	<!-- ==========================事务控制的配置================================ -->



	<!-- 开启基于注解的事务 -->
	<context:component-scan
		base-package="com.hdu.wll" />
	<context:annotation-config />
	 <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /> 
		<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
</beans>
